name: CI - Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Load workflow configuration
  load-config:
    runs-on: ubuntu-latest
    outputs:
      dotnet-version: ${{ steps.config.outputs.dotnet-version }}
      build-configuration: ${{ steps.config.outputs.build-configuration }}
      main-branch: ${{ steps.config.outputs.main-branch }}
      develop-branch: ${{ steps.config.outputs.develop-branch }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Load workflow configuration
      id: config
      uses: ./.github/actions/load-config

  # Job to determine affected projects
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.get-affected.outputs.has-changes }}
      matrix: ${{ steps.get-affected.outputs.matrix }}
      affected-projects: ${{ steps.get-affected.outputs.affected-projects }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for Nx affected detection
        ref: ${{ github.head_ref || github.ref_name }}

    - name: Fetch main branch
      run: |
        # Fetch main branch safely
        if [ "${{ github.ref_name }}" = "main" ]; then
          echo "Already on main branch, no need to fetch"
        else
          git fetch origin main:main
        fi

    - name: Setup environment
      uses: ./.github/actions/setup-environment

    - name: Get affected projects
      id: get-affected
      run: |
        # Determine base and head branches
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          HEAD_BRANCH="${{ github.event.pull_request.head.ref }}"
        else
          # For push events (like after merge), compare with the previous commit
          # This will detect changes that were just merged
          BASE_BRANCH="HEAD~1"
          HEAD_BRANCH="HEAD"
        fi
        
        echo "Detecting changes from $BASE_BRANCH to $HEAD_BRANCH"
        
        # Run the PowerShell script to get affected projects
        pwsh .github/scripts/get-affected-projects.ps1 -BaseBranch $BASE_BRANCH -HeadBranch $HEAD_BRANCH

  # Build affected projects in parallel
  build:
    needs: [load-config, detect-changes]
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment
      uses: ./.github/actions/setup-environment

    - name: Debug matrix information
      run: |
        echo "=== DEBUG: Matrix Information ==="
        echo "Project name: ${{ matrix.project.name }}"
        echo "Project type: ${{ matrix.project.type }}"
        echo "Project path: ${{ matrix.project.path }}"
        echo "Build configuration: ${{ needs.load-config.outputs.build-configuration }}"
        echo "Is webapi: ${{ matrix.project.type == 'webapi' }}"
        echo "================================"

    - name: Debug project structure
      run: |
        echo "=== DEBUG: Project Structure ==="
        echo "Current directory: $(pwd)"
        echo "Project path exists: $([ -d "${{ matrix.project.path }}" ] && echo "YES" || echo "NO")"
        if [ -d "${{ matrix.project.path }}" ]; then
          echo "Project contents:"
          ls -la "${{ matrix.project.path }}"
          echo "Project.json exists: $([ -f "${{ matrix.project.path }}/project.json" ] && echo "YES" || echo "NO")"
          if [ -f "${{ matrix.project.path }}/project.json" ]; then
            echo "Project.json contents:"
            cat "${{ matrix.project.path }}/project.json"
          fi
        fi
        echo "================================"

    - name: Debug Nx configuration
      run: |
        echo "=== DEBUG: Nx Configuration ==="
        echo "Nx version: $(npx nx --version)"
        echo "Available projects:"
        npx nx show projects
        echo "Project name: ${{ matrix.project.name }}"
        if [ -n "${{ matrix.project.name }}" ]; then
          echo "Project configuration for ${{ matrix.project.name }}:"
          npx nx show project ${{ matrix.project.name }} --json
          echo "Available targets for ${{ matrix.project.name }}:"
          npx nx show project ${{ matrix.project.name }} --targets
        else
          echo "❌ No project name provided in matrix"
        fi
        echo "================================"

    - name: Build affected projects
      run: |
        echo "=== DEBUG: Building Project ==="
        if [ -n "${{ matrix.project.name }}" ]; then
          echo "Running build for: ${{ matrix.project.name }}"
          npx nx run-many --target=build \
            --projects=${{ matrix.project.name }} \
            --configuration=${{ needs.load-config.outputs.build-configuration }} \
            --parallel=1 \
            --verbose || echo "❌ Build target not found or build failed"
          echo "Build completed"
        else
          echo "❌ No project name provided in matrix"
          exit 1
        fi
        echo "================================"

    - name: Debug build output
      run: |
        echo "=== DEBUG: Build Output ==="
        echo "Checking if bin directory exists:"
        if [ -d "${{ matrix.project.path }}/bin" ]; then
          echo "Bin directory contents:"
          find "${{ matrix.project.path }}/bin" -type f -name "*.dll" -o -name "*.exe" | head -10
        else
          echo "❌ Bin directory does not exist!"
        fi
        echo "================================"

    - name: Debug publish configuration
      if: matrix.project.type == 'webapi'
      run: |
        echo "=== DEBUG: Publish Configuration ==="
        echo "Project type is webapi, checking publish target..."
        echo "Publish target configuration:"
        if [ -n "${{ matrix.project.name }}" ]; then
          npx nx show project ${{ matrix.project.name }} --target=publish --json || echo "❌ Publish target not found or project doesn't exist"
        else
          echo "❌ No project name provided in matrix"
        fi
        echo "================================"

    - name: Publish project (if webapi)
      if: matrix.project.type == 'webapi'
      run: |
        echo "=== DEBUG: Publishing Project ==="
        if [ -n "${{ matrix.project.name }}" ]; then
          echo "Running publish for: ${{ matrix.project.name }}"
          echo "Publish path will be: ${{ matrix.project.path }}/publish"
          
          # Run publish with verbose output
          npx nx run-many --target=publish \
            --projects=${{ matrix.project.name }} \
            --configuration=${{ needs.load-config.outputs.build-configuration }} \
            --parallel=1 \
            --verbose || echo "❌ Publish target not found or publish failed"
          
          echo "Publish completed"
        else
          echo "❌ No project name provided in matrix"
          exit 1
        fi
        echo "================================"

    - name: Debug publish output
      if: matrix.project.type == 'webapi'
      run: |
        echo "=== DEBUG: Publish Output ==="
        echo "Checking if publish directory exists:"
        if [ -d "${{ matrix.project.path }}/publish" ]; then
          echo "✅ Publish directory exists!"
          echo "Publish directory contents:"
          ls -la "${{ matrix.project.path }}/publish"
          echo "Looking for key files:"
          find "${{ matrix.project.path }}/publish" -type f -name "*.dll" -o -name "*.exe" -o -name "*.json" | head -10
        else
          echo "❌ Publish directory does not exist!"
          echo "Available directories in project path:"
          ls -la "${{ matrix.project.path }}"
        fi
        echo "================================"

    - name: Upload build artifacts
      if: matrix.project.type == 'webapi'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.project.name }}-build-artifacts
        path: ${{ matrix.project.path }}/publish
        retention-days: 30

    - name: Debug artifact upload
      if: matrix.project.type == 'webapi'
      run: |
        echo "=== DEBUG: Artifact Upload ==="
        echo "Attempting to upload artifacts from: ${{ matrix.project.path }}/publish"
        echo "Directory exists: $([ -d "${{ matrix.project.path }}/publish" ] && echo "YES" || echo "NO")"
        if [ -d "${{ matrix.project.path }}/publish" ]; then
          echo "Files to be uploaded:"
          find "${{ matrix.project.path }}/publish" -type f | wc -l
          echo "Total size:"
          du -sh "${{ matrix.project.path }}/publish"
        fi
        echo "================================"

  # Test affected projects in parallel
  test:
    needs: [load-config, detect-changes]
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment
      uses: ./.github/actions/setup-environment

    - name: Run tests with coverage
      run: |
        if [ -n "${{ matrix.project.name }}" ]; then
          echo "Running tests for: ${{ matrix.project.name }}"
          npx nx run-many --target=test \
            --projects=${{ matrix.project.name }} \
            --configuration=${{ needs.load-config.outputs.build-configuration }} \
            --parallel=1 \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage || echo "❌ Test target not found or tests failed"
        else
          echo "❌ No project name provided in matrix"
          exit 1
        fi

    - name: Generate coverage report
      if: always()
      run: |
        if [ -n "${{ matrix.project.name }}" ]; then
          echo "Generating coverage report for: ${{ matrix.project.name }}"
          npx nx run-many --target=coverage \
            --projects=${{ matrix.project.name }} \
            --configuration=${{ needs.load-config.outputs.build-configuration }} || echo "❌ Coverage target not found"
        else
          echo "❌ No project name provided in matrix"
        fi

    - name: Upload coverage reports
      if: always()
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/**/coverage.cobertura.xml
        flags: ${{ matrix.project.name }}
        name: ${{ matrix.project.name }}-coverage
        fail_ci_if_error: false

  # Summary job to report results
  summary:
    needs: [load-config, detect-changes, build, test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "# Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add job status information
        echo "## Job Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check each job result
        if [ "${{ needs.detect-changes.result }}" = "success" ]; then
          echo "✅ **Detect Changes**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Detect Changes**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.build.result }}" = "success" ]; then
          echo "✅ **Build**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "✅ **Test**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Test**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY

  # Fail the workflow if any required jobs failed
  check-results:
    needs: [load-config, detect-changes, build, test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Debug job results
      run: |
        echo "Debug information:"
        echo "has-changes: '${{ needs.detect-changes.outputs.has-changes }}'"
        echo "detect-changes.result: '${{ needs.detect-changes.result }}'"
        echo "build.result: '${{ needs.build.result }}'"
        echo "test.result: '${{ needs.test.result }}'"
        echo "build.outputs: ${{ toJSON(needs.build.outputs) }}"
        echo "test.outputs: ${{ toJSON(needs.test.outputs) }}"

    - name: Check build results
      if: needs.detect-changes.outputs.has-changes == 'true' && needs.build.result != 'success' && needs.build.result != 'skipped'
      run: |
        echo "❌ Build job failed"
        echo "Build result was: ${{ needs.build.result }}"
        exit 1

    - name: Check test results
      if: needs.detect-changes.outputs.has-changes == 'true' && needs.test.result != 'success' && needs.test.result != 'skipped'
      run: |
        echo "❌ Test job failed"
        echo "Test result was: ${{ needs.test.result }}"
        exit 1

    - name: All checks passed
      if: needs.detect-changes.outputs.has-changes == 'true' && (needs.build.result == 'success' || needs.build.result == 'skipped') && (needs.test.result == 'success' || needs.test.result == 'skipped')
      run: |
        echo "✅ All checks passed"
        
    - name: No changes detected
      if: needs.detect-changes.outputs.has-changes == 'false'
      run: |
        echo "ℹ️ No changes detected - skipping build and test" 