name: CI - Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Load workflow configuration
  load-config:
    runs-on: ubuntu-latest
    outputs:
      dotnet-version: ${{ steps.config.outputs.dotnet-version }}
      build-configuration: ${{ steps.config.outputs.build-configuration }}
      main-branch: ${{ steps.config.outputs.main-branch }}
      develop-branch: ${{ steps.config.outputs.develop-branch }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Load workflow configuration
      id: config
      uses: ./.github/actions/load-config

  # Job to determine affected projects
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.get-affected.outputs.has-changes }}
      matrix: ${{ steps.get-affected.outputs.matrix }}
      affected-projects: ${{ steps.get-affected.outputs.affected-projects }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for Nx affected detection
        ref: ${{ github.head_ref || github.ref_name }}

    - name: Fetch main branch
      run: |
        # Fetch main branch safely
        if [ "${{ github.ref_name }}" = "main" ]; then
          echo "Already on main branch, no need to fetch"
        else
          git fetch origin main:main
        fi

    - name: Setup environment
      uses: ./.github/actions/setup-environment

    - name: Get affected projects
      id: get-affected
      run: |
        # Determine base and head branches
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          HEAD_BRANCH="${{ github.event.pull_request.head.ref }}"
        else
          # For push events (like after merge), compare with the previous commit
          # This will detect changes that were just merged
          BASE_BRANCH="HEAD~1"
          HEAD_BRANCH="HEAD"
        fi
        
        echo "Detecting changes from $BASE_BRANCH to $HEAD_BRANCH"
        
        # Run the PowerShell script to get affected projects
        pwsh .github/scripts/get-affected-projects.ps1 -BaseBranch $BASE_BRANCH -HeadBranch $HEAD_BRANCH

  # Build affected projects in parallel
  build:
    needs: [load-config, detect-changes]
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment
      uses: ./.github/actions/setup-environment

    - name: Restore dependencies
      run: dotnet restore ${{ matrix.project.path }}

    - name: Build project
      run: |
        dotnet build ${{ matrix.project.path }} \
          --configuration ${{ needs.load-config.outputs.build-configuration }} \
          --no-restore

    - name: Publish project (if webapi)
      if: matrix.project.type == 'webapi'
      run: |
        dotnet publish ${{ matrix.project.path }} \
          --configuration ${{ needs.load-config.outputs.build-configuration }} \
          --output ./publish/${{ matrix.project.name }} \
          --no-restore

    - name: Upload build artifacts
      if: matrix.project.type == 'webapi'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.project.name }}-build-artifacts
        path: ./publish/${{ matrix.project.name }}
        retention-days: 30

  # Test affected projects in parallel
  test:
    needs: [load-config, detect-changes]
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment
      uses: ./.github/actions/setup-environment

    - name: Restore dependencies
      run: dotnet restore ${{ matrix.project.path }}

    - name: Run tests
      run: |
        dotnet test ${{ matrix.project.path }} \
          --configuration ${{ needs.load-config.outputs.build-configuration }} \
          --no-restore \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/**/coverage.cobertura.xml
        flags: ${{ matrix.project.name }}
        name: ${{ matrix.project.name }}-coverage

  # Summary job to report results
  summary:
    needs: [load-config, detect-changes, build, test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "# ${{ inputs.title || 'Workflow Summary' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add job status information
        jobs='${{ inputs.jobs || '[]' }}'
        echo "## Job Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check each job result
        if [ "${{ needs.detect-changes.result }}" = "success" ]; then
          echo "✅ **Detect Changes**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Detect Changes**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.build.result }}" = "success" ]; then
          echo "✅ **Build**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "✅ **Test**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Test**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add additional content if provided
        if [ -n "${{ inputs.additional-content }}" ]; then
          echo "${{ inputs.additional-content }}" >> $GITHUB_STEP_SUMMARY
        fi

  # Fail the workflow if any required jobs failed
  check-results:
    needs: [load-config, detect-changes, build, test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check build results
      if: needs.detect-changes.outputs.has-changes == 'true' && needs.build.result != 'success' && needs.build.result != 'skipped'
      run: |
        echo "❌ Build job failed"
        exit 1

    - name: Check test results
      if: needs.detect-changes.outputs.has-changes == 'true' && needs.test.result != 'success' && needs.test.result != 'skipped'
      run: |
        echo "❌ Test job failed"
        exit 1

    - name: All checks passed
      if: needs.detect-changes.outputs.has-changes == 'true' && (needs.build.result == 'success' || needs.build.result == 'skipped') && (needs.test.result == 'success' || needs.test.result == 'skipped')
      run: |
        echo "✅ All checks passed"
        
    - name: No changes detected
      if: needs.detect-changes.outputs.has-changes == 'false'
      run: |
        echo "ℹ️ No changes detected - skipping build and test" 