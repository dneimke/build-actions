name: CI - Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Load workflow configuration
  load-config:
    runs-on: ubuntu-latest
    outputs:
      dotnet-version: ${{ steps.config.outputs.dotnet-version }}
      build-configuration: ${{ steps.config.outputs.build-configuration }}
      main-branch: ${{ steps.config.outputs.main-branch }}
      develop-branch: ${{ steps.config.outputs.develop-branch }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Load workflow configuration
      id: config
      uses: ./.github/actions/load-config

  # Job to determine affected projects
  detect-changes:
    uses: ./.github/workflows/templates/detect-changes.yml

  # Build affected projects in parallel
  build:
    needs: [load-config, detect-changes]
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: Build ${{ matrix.project.name }}
      uses: ./.github/workflows/templates/build-dotnet.yml
      with:
        project-name: ${{ matrix.project.name }}
        project-path: ${{ matrix.project.path }}
        project-type: ${{ matrix.project.type }}
        dotnet-version: ${{ needs.load-config.outputs.dotnet-version }}
        build-configuration: ${{ needs.load-config.outputs.build-configuration }}
        publish: ${{ matrix.project.type == 'webapi' }}

  # Test affected projects in parallel
  test:
    needs: [load-config, detect-changes]
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: Test ${{ matrix.project.name }}
      uses: ./.github/workflows/templates/test-dotnet.yml
      with:
        project-name: ${{ matrix.project.name }}
        project-path: ${{ matrix.project.path }}
        dotnet-version: ${{ needs.load-config.outputs.dotnet-version }}
        collect-coverage: true

  # Summary job to report results
  summary:
    needs: [load-config, detect-changes, build, test]
    uses: ./.github/workflows/templates/generate-summary.yml
    with:
      title: 'CI Summary'
      jobs: '["detect-changes", "build", "test"]'
      additional-content: |
        if [ "${{ needs.detect-changes.outputs.has-changes }}" = "true" ]; then
          echo "### Affected Projects" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.detect-changes.outputs.affected-projects }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Build Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "✅ All builds passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some builds failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test.result }}" = "success" ]; then
            echo "✅ All tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some tests failed" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "No changes detected in any projects." >> $GITHUB_STEP_SUMMARY
        fi

  # Fail the workflow if any required jobs failed
  check-results:
    needs: [load-config, detect-changes, build, test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check build results
      if: needs.detect-changes.outputs.has-changes == 'true' && needs.build.result != 'success'
      run: |
        echo "❌ Build job failed"
        exit 1

    - name: Check test results
      if: needs.detect-changes.outputs.has-changes == 'true' && needs.test.result != 'success'
      run: |
        echo "❌ Test job failed"
        exit 1

    - name: All checks passed
      if: needs.detect-changes.outputs.has-changes == 'true' && needs.build.result == 'success' && needs.test.result == 'success'
      run: |
        echo "✅ All checks passed" 