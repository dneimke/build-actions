name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

jobs:
  # Load workflow configuration
  load-config:
    runs-on: ubuntu-latest
    outputs:
      dotnet-version: ${{ steps.config.outputs.dotnet-version }}
      main-branch: ${{ steps.config.outputs.main-branch }}
      develop-branch: ${{ steps.config.outputs.develop-branch }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Load workflow configuration
      id: config
      uses: ./.github/actions/load-config

  # Validate PR title and description
  # Validate PR title and description
  validate-pr:
    runs-on: ubuntu-latest
    steps:
    - name: Check PR title format
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          test
          chore
        requireScope: false
        requireBody: false

  # Check for merge conflicts
  check-conflicts:
    runs-on: ubuntu-latest
    steps:
    - name: Check for merge conflicts
      run: |
        if [ "${{ github.event.pull_request.mergeable_state }}" = "conflicting" ]; then
          echo "❌ This PR has merge conflicts that need to be resolved"
          exit 1
        else
          echo "✅ No merge conflicts detected"
        fi

  # Dependency vulnerability check
  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment
      uses: ./.github/actions/setup-environment

    - name: Debug Nx restore
      run: |
        echo "=== DEBUG: Nx Restore ==="
        echo "Nx version: $(npx nx --version)"
        echo "Available projects:"
        npx nx show projects
        echo "================================"

    - name: Restore dependencies with Nx
      run: |
        echo "Restoring .NET dependencies using Nx..."
        npx nx g @nx-dotnet/core:restore --verbose
        
        echo "✅ Nx restore completed"

        - name: Debug project assets
      run: |
        echo "=== DEBUG: Project Assets ==="
        find . -name "*.csproj" -type f | while read -r project; do
          echo "Checking assets for $project"
          project_dir=$(dirname "$project")
          if [ -f "$project_dir/obj/project.assets.json" ]; then
            echo "✅ Assets file exists for $project"
          else
            echo "❌ No assets file for $project"
            echo "Contents of $project_dir/obj/:"
            ls -la "$project_dir/obj/" 2>/dev/null || echo "obj directory does not exist"
          fi
        done
        echo "================================"

    - name: Check for vulnerable packages
      run: |
        echo "Checking for vulnerable NuGet packages..."
        
        # Get list of all .csproj files
        find . -name "*.csproj" -type f | while read -r project; do
          echo "Checking $project"
          
          # Check if assets file exists before running vulnerability check
          project_dir=$(dirname "$project")
          if [ -f "$project_dir/obj/project.assets.json" ]; then
            echo "✅ Assets file exists, checking vulnerabilities for $project"
            dotnet list "$project" package --vulnerable
            if [ $? -ne 0 ]; then
              echo "❌ Vulnerable packages found in $project"
              exit 1
            fi
          else
            echo "⚠️ Skipping vulnerability check for $project (no assets file)"
            echo "This project may not have been properly restored"
          fi
        done
        
        echo "✅ Vulnerability check completed"

  # Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment
      uses: ./.github/actions/setup-environment

    - name: Run Nx lint
      run: |
        echo "Running linting checks..."
        npx nx run-many --target=lint --all
        
        if [ $? -ne 0 ]; then
          echo "❌ Linting issues found"
          exit 1
        fi
        
        echo "✅ All linting checks passed"

  # Size check (warn if PR is too large)
  size-check:
    runs-on: ubuntu-latest
    steps:
    - name: Check PR size
      run: |
        additions=${{ github.event.pull_request.additions }}
        deletions=${{ github.event.pull_request.deletions }}
        total_changes=$((additions + deletions))
        
        echo "PR changes: +$additions -$deletions (total: $total_changes)".
        
        if [ $total_changes -gt 1000 ]; then
          echo "⚠️  Large PR detected ($total_changes changes)"
          echo "Consider breaking this into smaller, more focused PRs"
        else
          echo "✅ PR size is reasonable"
        fi

  # Summary for PR
  pr-summary:
    needs: [load-config, validate-pr, check-conflicts, dependency-check, code-quality, size-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "# Pull Request Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add job status information
        echo "## Job Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check each job result
        if [ "${{ needs.validate-pr.result }}" = "success" ]; then
          echo "✅ **PR Validation**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **PR Validation**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.check-conflicts.result }}" = "success" ]; then
          echo "✅ **Conflict Check**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Conflict Check**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.dependency-check.result }}" = "success" ]; then
          echo "✅ **Dependency Check**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Dependency Check**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.code-quality.result }}" = "success" ]; then
          echo "✅ **Code Quality**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Code Quality**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.size-check.result }}" = "success" ]; then
          echo "✅ **Size Check**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Size Check**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note:** This PR will also trigger the main CI workflow for build and test validation." >> $GITHUB_STEP_SUMMARY 