name: CD - Deploy to Environments

on:
  workflow_run:
    workflows: ["CI - Build and Test"]
    branches: [ main ]
    types: [completed]
    # Only trigger on successful CI runs
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      app-name:
        description: 'Specific app to deploy (leave empty for all)'
        required: false
        type: string

jobs:
  # Load workflow configuration
  load-config:
    runs-on: ubuntu-latest
    outputs:
      dotnet-version: ${{ steps.config.outputs.dotnet-version }}
      build-configuration: ${{ steps.config.outputs.build-configuration }}
      staging-environment: ${{ steps.config.outputs.staging-environment }}
      production-environment: ${{ steps.config.outputs.production-environment }}
      main-branch: ${{ steps.config.outputs.main-branch }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Load workflow configuration
      id: config
      uses: ./.github/actions/load-config

  # Unified job to determine what to deploy
  determine-changes:
    needs: load-config
    if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.get-affected.outputs.has-changes }}
      matrix: ${{ steps.get-affected.outputs.matrix }}
      affected-projects: ${{ steps.get-affected.outputs.affected-projects }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for Nx affected detection
        ref: ${{ github.event.workflow_run.head_branch || github.ref }}

    - name: Setup environment
      uses: ./.github/actions/setup-environment

    - name: Get affected projects
      id: get-affected
      run: |
        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          # For workflow_run events, we need to determine what changed
          # We'll use the commit SHA from the CI workflow
          CI_COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          
          echo "Detecting changes for CI commit: $CI_COMMIT_SHA"
          
          # Get the previous commit on main to compare against
          git fetch origin main:main
          PREVIOUS_COMMIT=$(git rev-parse main~1)
          
          echo "Comparing $PREVIOUS_COMMIT to $CI_COMMIT_SHA"
          
          # Run the PowerShell script to get affected projects
          pwsh .github/scripts/get-affected-projects.ps1 -BaseBranch $PREVIOUS_COMMIT -HeadBranch $CI_COMMIT_SHA
        else
          # For manual dispatch, use the specified app or all apps
          if [ -n "${{ github.event.inputs.app-name }}" ]; then
            # Specific app deployment
            echo "Manual deployment for ${{ github.event.inputs.app-name }}"
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "affected-projects=${{ github.event.inputs.app-name }}" >> $GITHUB_OUTPUT
            
            # Create matrix for specific app
            matrix='{"include":[{"name":"${{ github.event.inputs.app-name }}","path":"apps/${{ github.event.inputs.app-name }}","type":"webapi"}]}'
            echo "matrix=$matrix" >> $GITHUB_OUTPUT
          else
            # Deploy all apps
            echo "Manual deployment for all apps"
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "affected-projects=EchoAPI" >> $GITHUB_OUTPUT
            
            matrix='{"include":[{"name":"EchoAPI","path":"apps/EchoAPI","type":"webapi"}]}'
            echo "matrix=$matrix" >> $GITHUB_OUTPUT
          fi
        fi

  # Consolidate deployment outputs
  consolidate-deployment:
    needs: [load-config, determine-changes]
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.consolidate.outputs.has-changes }}
      matrix: ${{ steps.consolidate.outputs.matrix }}
      affected-projects: ${{ steps.consolidate.outputs.affected-projects }}
    
    steps:
    - name: Consolidate outputs
      id: consolidate
      run: |
        echo "has-changes=${{ needs.determine-changes.outputs.has-changes }}" >> $GITHUB_OUTPUT
        echo "matrix=${{ needs.determine-changes.outputs.matrix }}" >> $GITHUB_OUTPUT
        echo "affected-projects=${{ needs.determine-changes.outputs.affected-projects }}" >> $GITHUB_OUTPUT

  # Download CI artifacts for deployment (automatic deployments)
  download-artifacts:
    needs: consolidate-deployment
    if: needs.consolidate-deployment.outputs.has-changes == 'true' && github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.consolidate-deployment.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: Download CI artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.project.name }}-build-artifacts
        path: ./artifacts/${{ matrix.project.name }}

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.project.name }}-deployment-artifacts
        path: ./artifacts/${{ matrix.project.name }}

  # Build for manual deployments (when no CI artifacts available)
  build-for-manual-deployment:
    needs: [consolidate-deployment, determine-changes]
    if: needs.consolidate-deployment.outputs.has-changes == 'true' && github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.consolidate-deployment.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.ref }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ needs.load-config.outputs.dotnet-version }}

    - name: Restore dependencies
      run: dotnet restore ${{ matrix.project.path }}

    - name: Build project
      run: |
        dotnet build ${{ matrix.project.path }} \
          --configuration ${{ needs.load-config.outputs.build-configuration }} \
          --no-restore

    - name: Publish project
      run: |
        dotnet publish ${{ matrix.project.path }} \
          --configuration ${{ needs.load-config.outputs.build-configuration }} \
          --output ./publish/${{ matrix.project.name }} \
          --no-restore

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.project.name }}-deployment-artifacts
        path: ./publish/${{ matrix.project.name }}

  # Deploy to staging environment
  deploy-staging:
    needs: [consolidate-deployment, download-artifacts, build-for-manual-deployment]
    if: |
      needs.consolidate-deployment.outputs.has-changes == 'true' && 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging' || 
       (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'))
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.consolidate-deployment.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: Load workflow configuration
      id: config
      uses: ./.github/actions/load-config

    - name: Download deployment artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.project.name }}-deployment-artifacts
        path: ./artifacts

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ matrix.project.name }}
        package: ./artifacts
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}

    - name: Health check
      run: |
        echo "Performing health check for ${{ matrix.project.name }}"
        
        # Wait for deployment to be ready
        sleep ${{ steps.config.outputs.health-check-delay }}
        
        # Basic health check
        APP_URL="https://${{ matrix.project.name }}.azurewebsites.net"
        
        # Check if the app is responding
        response=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL/health || echo "000")
        
        if [ "$response" = "200" ]; then
          echo "✅ Health check passed"
        else
          echo "❌ Health check failed (HTTP $response)"
          exit 1
        fi

    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Successfully deployed ${{ matrix.project.name }} to staging"
        echo "Deployment SHA: ${{ github.sha }}"
        echo "Environment: staging"

  # Deploy to production (manual approval required)
  deploy-production:
    needs: [consolidate-deployment, download-artifacts, build-for-manual-deployment, deploy-staging]
    if: |
      needs.consolidate-deployment.outputs.has-changes == 'true' && 
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    environment: ${{ needs.load-config.outputs.production-environment }}
    strategy:
      matrix:
        project: ${{ fromJson(needs.consolidate-deployment.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: Load workflow configuration
      id: config
      uses: ./.github/actions/load-config

    - name: Download deployment artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.project.name }}-deployment-artifacts
        path: ./artifacts

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ matrix.project.name }}
        package: ./artifacts
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}

    - name: Health check
      run: |
        echo "Performing health check for ${{ matrix.project.name }}"
        
        # Wait for deployment to be ready
        sleep ${{ steps.config.outputs.health-check-delay }}
        
        # Basic health check
        APP_URL="https://${{ matrix.project.name }}.azurewebsites.net"
        
        # Check if the app is responding
        response=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL/health || echo "000")
        
        if [ "$response" = "200" ]; then
          echo "✅ Health check passed"
        else
          echo "❌ Health check failed (HTTP $response)"
          exit 1
        fi

    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Successfully deployed ${{ matrix.project.name }} to production"
        echo "Deployment SHA: ${{ github.sha }}"
        echo "Environment: production"

  # Deployment summary
  deployment-summary:
    needs: [consolidate-deployment, download-artifacts, build-for-manual-deployment, deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "# Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add job status information
        echo "## Job Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check each job result
        if [ "${{ needs.consolidate-deployment.result }}" = "success" ]; then
          echo "✅ **Consolidate Deployment**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Consolidate Deployment**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          if [ "${{ needs.download-artifacts.result }}" = "success" ]; then
            echo "✅ **Download Artifacts**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Download Artifacts**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
        else
          if [ "${{ needs.build-for-manual-deployment.result }}" = "success" ]; then
            echo "✅ **Build for Manual Deployment**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build for Manual Deployment**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        if [ "${{ needs.deploy-staging.result }}" = "success" ]; then
          echo "✅ **Deploy Staging**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Deploy Staging**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy-production.result }}" = "success" ]; then
          echo "✅ **Deploy Production**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Deploy Production**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add deployment details
        if [ "${{ needs.consolidate-deployment.outputs.has-changes }}" = "true" ]; then
          echo "### Deployed Projects" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.consolidate-deployment.outputs.affected-projects }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Artifact Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            if [ "${{ needs.download-artifacts.result }}" = "success" ]; then
              echo "✅ All artifacts downloaded successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Some artifacts failed to download" >> $GITHUB_STEP_SUMMARY
            fi
          else
            if [ "${{ needs.build-for-manual-deployment.result }}" = "success" ]; then
              echo "✅ All builds completed successfully" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Some builds failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "### Production Deployment" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.deploy-production.result }}" = "success" ]; then
              echo "✅ Production deployment successful" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Production deployment failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### Staging Deployment" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.deploy-staging.result }}" = "success" ]; then
              echo "✅ Staging deployment successful" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Staging deployment failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        else
          echo "No changes detected. No deployment needed." >> $GITHUB_STEP_SUMMARY
        fi 