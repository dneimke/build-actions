name: CD - Deploy to Environments

on:
  workflow_run:
    workflows: ["CI - Build and Test"]
    branches: [ main ]
    types: [completed]
    # Only trigger on successful CI runs
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      app-name:
        description: 'Specific app to deploy (leave empty for all)'
        required: false
        type: string

jobs:
  # Load workflow configuration
  load-config:
    runs-on: ubuntu-latest
    outputs:
      dotnet-version: ${{ steps.config.outputs.dotnet-version }}
      build-configuration: ${{ steps.config.outputs.build-configuration }}
      staging-environment: ${{ steps.config.outputs.staging-environment }}
      production-environment: ${{ steps.config.outputs.production-environment }}
      main-branch: ${{ steps.config.outputs.main-branch }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Load workflow configuration
      id: config
      uses: ./.github/actions/load-config

  # Unified job to determine what to deploy
  determine-changes:
    needs: load-config
    if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.get-affected.outputs.has-changes }}
      matrix: ${{ steps.get-affected.outputs.matrix }}
      affected-projects: ${{ steps.get-affected.outputs.affected-projects }}
      app-name: ${{ steps.get-affected.outputs.app-name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for Nx affected detection
        ref: ${{ github.event.workflow_run.head_branch || github.ref }}

    - name: Setup environment
      uses: ./.github/actions/setup-environment

    - name: Get affected projects
      id: get-affected
      run: |
        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          # For workflow_run events, we need to determine what changed
          # We'll use the commit SHA from the CI workflow
          CI_COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          
          echo "Detecting changes for CI commit: $CI_COMMIT_SHA"
          
          # Get the previous commit on main to compare against
          # Use a different approach to avoid the fetch conflict
          git fetch origin main
          PREVIOUS_COMMIT=$(git rev-parse origin/main~1)
          
          echo "Comparing $PREVIOUS_COMMIT to $CI_COMMIT_SHA"
          
          # Run the PowerShell script to get affected projects
          pwsh .github/scripts/get-affected-projects.ps1 -BaseBranch $PREVIOUS_COMMIT -HeadBranch $CI_COMMIT_SHA
          
          # For automatic deployments, set a default app-name (will be overridden by PowerShell script if it outputs one)
          echo "app-name=echo-api" >> $GITHUB_OUTPUT
        else
          # For manual dispatch, use the specified app or all apps
          if [ -n "${{ github.event.inputs.app-name }}" ]; then
            # Specific app deployment
            echo "Manual deployment for ${{ github.event.inputs.app-name }}"
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "affected-projects=${{ github.event.inputs.app-name }}" >> $GITHUB_OUTPUT
            echo "app-name=${{ github.event.inputs.app-name }}" >> $GITHUB_OUTPUT
            echo "matrix={\"project\":[{\"name\":\"${{ github.event.inputs.app-name }}\",\"path\":\"apps/${{ github.event.inputs.app-name }}\",\"type\":\"webapi\"}]}" >> $GITHUB_OUTPUT
          else
            # Deploy all apps
            echo "Manual deployment for all apps"
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "affected-projects=echo-api" >> $GITHUB_OUTPUT
            echo "app-name=echo-api" >> $GITHUB_OUTPUT
            echo "matrix={\"project\":[{\"name\":\"echo-api\",\"path\":\"apps/EchoAPI\",\"type\":\"webapi\"}]}" >> $GITHUB_OUTPUT
          fi
        fi

  # Consolidate deployment outputs
  consolidate-deployment:
    needs: [load-config, determine-changes]
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.consolidate.outputs.has-changes }}
      matrix: ${{ steps.consolidate.outputs.matrix }}
      affected-projects: ${{ steps.consolidate.outputs.affected-projects }}
      app-name: ${{ steps.consolidate.outputs.app-name }}
    
    steps:
    - name: Debug matrix input
      run: |
        echo "=== DEBUG: Matrix Input ==="
        echo "Raw matrix from determine-changes:"
        echo "${{ needs.determine-changes.outputs.matrix }}"
        echo "================================"

    - name: Consolidate outputs
      id: consolidate
      run: |
        echo "has-changes=${{ needs.determine-changes.outputs.has-changes }}" >> $GITHUB_OUTPUT
        echo "matrix=${{ needs.determine-changes.outputs.matrix }}" >> $GITHUB_OUTPUT
        echo "affected-projects=${{ needs.determine-changes.outputs.affected-projects }}" >> $GITHUB_OUTPUT
        echo "app-name=${{ needs.determine-changes.outputs.app-name }}" >> $GITHUB_OUTPUT

    - name: Debug matrix output
      run: |
        echo "=== DEBUG: Matrix Output ==="
        echo "Final matrix output:"
        echo "${{ steps.consolidate.outputs.matrix }}"
        echo "================================"

    - name: Debug all outputs
      run: |
        echo "=== DEBUG: All Outputs ==="
        echo "has-changes: '${{ needs.determine-changes.outputs.has-changes }}'"
        echo "matrix: '${{ needs.determine-changes.outputs.matrix }}'"
        echo "affected-projects: '${{ needs.determine-changes.outputs.affected-projects }}'"
        echo "app-name: '${{ needs.determine-changes.outputs.app-name }}'"
        echo "================================"

    - name: Test matrix JSON parsing
      run: |
        echo "=== TESTING MATRIX JSON ==="
        MATRIX_JSON='${{ needs.determine-changes.outputs.matrix }}'
        echo "Raw matrix JSON: '$MATRIX_JSON'"
        
        if [ -n "$MATRIX_JSON" ]; then
          echo "Matrix JSON is not empty"
          # Test if it's valid JSON
          if echo "$MATRIX_JSON" | jq . > /dev/null 2>&1; then
            echo "✅ Matrix JSON is valid"
            echo "Parsed matrix:"
            echo "$MATRIX_JSON" | jq .
          else
            echo "❌ Matrix JSON is invalid"
            echo "Raw content: $MATRIX_JSON"
          fi
        else
          echo "❌ Matrix JSON is empty"
        fi
        echo "================================"

  # Download CI artifacts for deployment (automatic deployments)
  download-artifacts:
    needs: consolidate-deployment
    if: needs.consolidate-deployment.outputs.has-changes == 'true' && github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project:
          - name: ${{ needs.consolidate-deployment.outputs.app-name }}
            path: apps/${{ needs.consolidate-deployment.outputs.app-name }}
            type: webapi
      fail-fast: false
    
    steps:
    - name: Download CI artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.project.name }}-build-artifacts
        path: ./artifacts/${{ matrix.project.name }}

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.project.name }}-deployment-artifacts
        path: ./artifacts/${{ matrix.project.name }}

  # Build for manual deployments (when no CI artifacts available)
  build-for-manual-deployment:
    needs: [load-config, consolidate-deployment, determine-changes]
    if: needs.consolidate-deployment.outputs.has-changes == 'true' && github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project:
          - name: echo-api
            path: apps/EchoAPI
            type: webapi
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.ref }}

    - name: Setup environment
      uses: ./.github/actions/setup-environment

    - name: Restore dependencies
      run: npx nx g @nx-dotnet/core:restore

    - name: Build project
      run: |
        npx nx run-many --target=build \
          --projects=${{ matrix.project.name }} \
          --configuration=${{ needs.load-config.outputs.build-configuration }} \
          --parallel=1 \
          --verbose

    - name: Publish project
      run: |
        npx nx run-many --target=publish \
          --projects=${{ matrix.project.name }} \
          --configuration=${{ needs.load-config.outputs.build-configuration }} \
          --parallel=1 \
          --verbose

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.project.name }}-deployment-artifacts
        path: ${{ matrix.project.path }}/publish

  # Prepare artifacts for deployment (consolidates both automatic and manual builds)
  prepare-artifacts:
    needs: [consolidate-deployment, build-for-manual-deployment]
    if: needs.consolidate-deployment.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      # matrix: ${{ fromJson(needs.consolidate-deployment.outputs.matrix) }}  
      matrix:
        project:
          - name: echo-api
            path: apps/EchoAPI
            type: webapi
      fail-fast: false
      # Alternative hardcoded matrix for debugging:
      # matrix:
      #   project:
      #     - name: echo-api
      #       path: apps/EchoAPI
      #       type: webapi
    
    steps:
    - name: Debug prepare-artifacts start
      run: |
        echo "=== PREPARE-ARTIFACTS DEBUG ==="
        echo "Job started successfully!"
        echo "Matrix: ${{ toJson(matrix) }}"
        echo "Event name: ${{ github.event_name }}"
        echo "Consolidate deployment has-changes: ${{ needs.consolidate-deployment.outputs.has-changes }}"
        echo "Consolidate deployment matrix: ${{ needs.consolidate-deployment.outputs.matrix }}"
        echo "================================"

    - name: Check if artifacts exist from download
      id: check-download
      run: |
        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Download artifacts from download job (if available)
      if: steps.check-download.outputs.exists == 'true'
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.project.name }}-deployment-artifacts
        path: ./artifacts/${{ matrix.project.name }}
      continue-on-error: true

    - name: Download artifacts from build job (if available)
      if: steps.check-download.outputs.exists == 'false'
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.project.name }}-deployment-artifacts
        path: ./artifacts/${{ matrix.project.name }}

    - name: Upload consolidated artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.project.name }}-final-artifacts
        path: ./artifacts/${{ matrix.project.name }}

  # Deploy to staging environment
  deploy-staging:
    needs: [load-config, consolidate-deployment, prepare-artifacts]
    if: |
      needs.consolidate-deployment.outputs.has-changes == 'true' && 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging' || 
       (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'))
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.consolidate-deployment.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: Load workflow configuration
      id: config
      uses: ./.github/actions/load-config

    - name: Download final artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.project.name }}-final-artifacts
        path: ./artifacts

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ matrix.project.name }}
        package: ./artifacts
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}

    - name: Health check
      run: |
        echo "Performing health check for ${{ matrix.project.name }}"
        
        # Wait for deployment to be ready
        sleep ${{ steps.config.outputs.health-check-delay }}
        
        # Basic health check
        APP_URL="https://${{ matrix.project.name }}.azurewebsites.net"
        
        # Check if the app is responding
        response=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL/health || echo "000")
        
        if [ "$response" = "200" ]; then
          echo "✅ Health check passed"
        else
          echo "❌ Health check failed (HTTP $response)"
          exit 1
        fi

    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Successfully deployed ${{ matrix.project.name }} to staging"
        echo "Deployment SHA: ${{ github.sha }}"
        echo "Environment: staging"

  # Deploy to production (manual approval required)
  deploy-production:
    needs: [load-config, consolidate-deployment, prepare-artifacts, deploy-staging]
    if: |
      needs.consolidate-deployment.outputs.has-changes == 'true' && 
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    environment: ${{ needs.load-config.outputs.production-environment }}
    strategy:
      matrix: ${{ fromJson(needs.consolidate-deployment.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: Load workflow configuration
      id: config
      uses: ./.github/actions/load-config

    - name: Download final artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.project.name }}-final-artifacts
        path: ./artifacts

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ matrix.project.name }}
        package: ./artifacts
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}

    - name: Health check
      run: |
        echo "Performing health check for ${{ matrix.project.name }}"
        
        # Wait for deployment to be ready
        sleep ${{ steps.config.outputs.health-check-delay }}
        
        # Basic health check
        APP_URL="https://${{ matrix.project.name }}.azurewebsites.net"
        
        # Check if the app is responding
        response=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL/health || echo "000")
        
        if [ "$response" = "200" ]; then
          echo "✅ Health check passed"
        else
          echo "❌ Health check failed (HTTP $response)"
          exit 1
        fi

    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Successfully deployed ${{ matrix.project.name }} to production"
        echo "Deployment SHA: ${{ github.sha }}"
        echo "Environment: production"

  # Deployment summary
  deployment-summary:
    needs: [consolidate-deployment, prepare-artifacts, deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Debug job dependencies
      run: |
        echo "=== JOB DEPENDENCY DEBUG ==="
        echo "consolidate-deployment result: ${{ needs.consolidate-deployment.result }}"
        echo "download-artifacts result: ${{ needs.download-artifacts.result }}"
        echo "build-for-manual-deployment result: ${{ needs.build-for-manual-deployment.result }}"
        echo "prepare-artifacts result: ${{ needs.prepare-artifacts.result }}"
        echo "deploy-staging result: ${{ needs.deploy-staging.result }}"
        echo "deploy-production result: ${{ needs.deploy-production.result }}"
        echo "================================"

    - name: Generate summary
      run: |
        echo "# Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add job status information
        echo "## Job Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check each job result
        if [ "${{ needs.consolidate-deployment.result }}" = "success" ]; then
          echo "✅ **Consolidate Deployment**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Consolidate Deployment**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.prepare-artifacts.result }}" = "success" ]; then
          echo "✅ **Prepare Artifacts**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Prepare Artifacts**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy-staging.result }}" = "success" ]; then
          echo "✅ **Deploy Staging**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Deploy Staging**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy-production.result }}" = "success" ]; then
          echo "✅ **Deploy Production**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Deploy Production**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add deployment details
        if [ "${{ needs.consolidate-deployment.outputs.has-changes }}" = "true" ]; then
          echo "### Deployed Projects" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.consolidate-deployment.outputs.affected-projects }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Artifact Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.prepare-artifacts.result }}" = "success" ]; then
            echo "✅ All artifacts prepared successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some artifacts failed to prepare" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "### Production Deployment" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.deploy-production.result }}" = "success" ]; then
              echo "✅ Production deployment successful" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Production deployment failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### Staging Deployment" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.deploy-staging.result }}" = "success" ]; then
              echo "✅ Staging deployment successful" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Staging deployment failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        else
          echo "No changes detected. No deployment needed." >> $GITHUB_STEP_SUMMARY
        fi 